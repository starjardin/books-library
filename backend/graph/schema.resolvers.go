package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	database "books-library/db"
	"books-library/graph/model"
	"context"
	"fmt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		Text: input.Text,
		ID:   "3",
		User: &model.User{ID: input.UserID, Name: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)

	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database("todos").Collection("books-library")

	fmt.Println("Collections goes here", collection)

	// Insert the todo
	_, err = collection.InsertOne(context.Background(), todo)
	if err != nil {
		return nil, fmt.Errorf("failed to insert todo: %w", err)
	}

	fmt.Println("Inserted a todo into the collection")

	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.NewTodo) (*model.Todo, error) {
	for _, todo := range r.todos {
		if todo.ID == id {
			todo.Text = input.Text
			todo.User = &model.User{ID: input.UserID, Name: "user " + input.UserID}
			return todo, nil
		}
	}

	return nil, fmt.Errorf("todo with ID %s not found", id)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
