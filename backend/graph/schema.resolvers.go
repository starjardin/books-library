package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	database "books-library/db"
	"books-library/graph/model"
	"context"
	"fmt"

	"go.mongodb.org/mongo-driver/bson"
)

const onjaLibrary = "onja-library"

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := &model.Todo{
		Text: input.Text,
		ID:   "3",
		User: &model.User{ID: input.UserID, FirstName: "user " + input.UserID},
	}
	r.todos = append(r.todos, todo)

	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database("todos").Collection("books-library")

	// Insert the todo
	_, err = collection.InsertOne(context.Background(), todo)
	if err != nil {
		return nil, fmt.Errorf("failed to insert todo: %w", err)
	}

	fmt.Println("Inserted a todo into the collection")

	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.NewTodo) (*model.Todo, error) {
	for _, todo := range r.todos {
		if todo.ID == id {
			todo.Text = input.Text
			todo.User = &model.User{ID: input.UserID, FirstName: "user " + input.UserID}
			return todo, nil
		}
	}

	return nil, fmt.Errorf("todo with ID %s not found", id)
}

// AddBook is the resolver for the addBook field.
func (r *mutationResolver) AddBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	book := &model.Book{
		Title:           input.Title,
		Author:          input.Author,
		Isbn:            input.Isbn,
		AvailableCopies: input.AvailableCopies,
		IsBorrowed:      false,
		CreatedA:        "2021-09-01",
		BorrowedAt:      nil,
		ReturnedAt:      nil,
		DueDate:         nil,
		BorrowedBy:      nil,
	}

	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database(onjaLibrary).Collection("books")

	// Insert the book
	_, err = collection.InsertOne(context.Background(), book)
	if err != nil {
		return nil, fmt.Errorf("failed to insert book: %w", err)
	}

	fmt.Println("Inserted a book into the collection")

	return book, nil
}

// BorrowBook is the resolver for the borrowBook field.
func (r *mutationResolver) BorrowBook(ctx context.Context, bookID string, userID string) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: BorrowBook - borrowBook"))
}

// ReturnBook is the resolver for the returnBook field.
func (r *mutationResolver) ReturnBook(ctx context.Context, bookID string) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: ReturnBook - returnBook"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	client, err := database.ConnectToMongoDB()
	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}
	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database("todos").Collection("books-library")

	// Find all documents in the collection
	cursor, err := collection.Find(ctx, bson.D{})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var todos []*model.Todo
	// Iterate through the cursor and decode each document into a Todo object
	for cursor.Next(ctx) {
		var todo model.Todo
		if err := cursor.Decode(&todo); err != nil {
			return nil, err
		}
		todos = append(todos, &todo)
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return todos, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database(onjaLibrary).Collection("books")

	cursor, err := collection.Find(ctx, bson.D{})

	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	var books []*model.Book

	for cursor.Next(ctx) {
		var book model.Book
		if err := cursor.Decode(&book); err != nil {
			return nil, err
		}
		books = append(books, &book)
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return books, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database(onjaLibrary).Collection("users")

	cursor, err := collection.Find(ctx, bson.D{})

	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	var users []*model.User

	for cursor.Next(ctx) {
		var user model.User
		if err := cursor.Decode(&user); err != nil {
			return nil, err
		}
		users = append(users, &user)
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return users, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
