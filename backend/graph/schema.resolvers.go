package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.46

import (
	"books-library/constants"
	database "books-library/db"
	"books-library/graph/model"
	"books-library/utils"
	"context"
	"errors"
	"fmt"
	"log"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"golang.org/x/crypto/bcrypt"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id string, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: UpdateTodo - updateTodo"))
}

// AddBook is the resolver for the addBook field.
func (r *mutationResolver) AddBook(ctx context.Context, input model.NewBook) (*model.Book, error) {
	book := &model.Book{
		Title:           input.Title,
		Author:          input.Author,
		Isbn:            input.Isbn,
		AvailableCopies: input.AvailableCopies,
		IsBorrowed:      false,
		CreatedA:        time.Now().Format("2006-01-02 15:04:05"),
		BorrowedAt:      nil,
		ReturnedAt:      nil,
		DueDate:         nil,
		BorrowedBy:      nil,
	}

	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database(constants.OnjaLibrary).Collection("books")

	// Insert the book
	_, err = collection.InsertOne(context.Background(), book)
	if err != nil {
		return nil, fmt.Errorf("failed to insert book: %w", err)
	}

	fmt.Println("Inserted a book into the collection")

	return book, nil
}

// BorrowBook is the resolver for the borrowBook field.
func (r *mutationResolver) BorrowBook(ctx context.Context, isbn int, userID string) (*model.Book, error) {
	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	userObjectID, err := primitive.ObjectIDFromHex(userID)

	if err != nil {
		return nil, fmt.Errorf("invalid userID: %v", err)
	}

	// Find the user by userID
	var user model.User
	err = client.Database(constants.OnjaLibrary).Collection("users").FindOne(ctx, bson.M{"_id": userObjectID}).Decode(&user)
	if err != nil {
		return nil, fmt.Errorf("failed to find user: %v", err)
	}

	collection := client.Database("onja-library").Collection("books")

	filter := bson.M{"isbn": isbn}

	update := bson.M{
		"$set": bson.M{
			"isBorrowed": true,
			"borrowedAt": time.Now().Format("2006-01-02 15:04:05"),
			"dueDate":    time.Now().AddDate(0, 0, 7).Format("2006-01-02 15:04:05"),
			"borrowedBy": user,
		},
	}

	result := collection.FindOneAndUpdate(ctx, filter, update)
	if result.Err() != nil {
		return nil, fmt.Errorf("failed to borrow book: %w", result.Err())
	}

	var updatedBook model.Book
	err = result.Decode(&updatedBook)
	if err != nil {
		return nil, fmt.Errorf("failed to decode updated book: %w", err)
	}

	return &updatedBook, nil
}

// ReturnBook is the resolver for the returnBook field.
func (r *mutationResolver) ReturnBook(ctx context.Context, isbn int) (*model.Book, error) {
	panic(fmt.Errorf("not implemented: ReturnBook - returnBook"))
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.SignupInput) (*model.User, error) {
	var existingUser model.User
	err := r.UserCollection.FindOne(context.TODO(), bson.M{"email": input.Email}).Decode(&existingUser)
	if err == nil {
		return nil, fmt.Errorf("user already exists")
	}

	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(input.Password), bcrypt.DefaultCost)
	if err != nil {
		log.Fatal(err)
		return nil, err
	}

	objectID := primitive.NewObjectID()

	user := model.User{
		ID:       objectID.Hex(),
		Username: input.Username,
		Email:    input.Email,
		Password: string(hashedPassword),
	}

	_, err = r.UserCollection.InsertOne(context.TODO(), user)
	if err != nil {
		return nil, err
	}

	token, err := utils.GenerateJWTToken(user)
	if err != nil {
		return nil, err
	}

	user.Token = token
	return &user, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.User, error) {
	var existingUser model.User

	err := r.UserCollection.FindOne(context.TODO(), bson.M{"email": input.Email}).Decode(&existingUser)
	if err != nil {
		return nil, fmt.Errorf("user not found, email does not exist on our database")
	}

	err = bcrypt.CompareHashAndPassword([]byte(existingUser.Password), []byte(input.Password))
	if err != nil {
		return nil, errors.New("invalid password")
	}

	token, err := utils.GenerateJWTToken(existingUser)
	if err != nil {
		return nil, fmt.Errorf("failed to generate token: %v", err)
	}

	existingUser.Token = token
	return &existingUser, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	client, err := database.ConnectToMongoDB()
	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}
	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database("todos").Collection("books-library")

	// Find all documents in the collection
	cursor, err := collection.Find(ctx, bson.D{})
	if err != nil {
		return nil, err
	}
	defer cursor.Close(ctx)

	var todos []*model.Todo
	// Iterate through the cursor and decode each document into a Todo object
	for cursor.Next(ctx) {
		var todo model.Todo
		if err := cursor.Decode(&todo); err != nil {
			return nil, err
		}
		todos = append(todos, &todo)
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return todos, nil
}

// Books is the resolver for the books field.
func (r *queryResolver) Books(ctx context.Context) ([]*model.Book, error) {
	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database(constants.OnjaLibrary).Collection("books")

	cursor, err := collection.Find(ctx, bson.D{})

	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	var books []*model.Book

	for cursor.Next(ctx) {
		var book model.Book
		if err := cursor.Decode(&book); err != nil {
			return nil, err
		}
		books = append(books, &book)
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return books, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	client, err := database.ConnectToMongoDB()

	if err != nil {
		return nil, fmt.Errorf("failed to connect to MongoDB: %w", err)
	}

	defer func() {
		if err := client.Disconnect(ctx); err != nil {
			fmt.Println(err)
		}
	}()

	collection := client.Database(constants.OnjaLibrary).Collection("users")

	cursor, err := collection.Find(ctx, bson.D{})

	if err != nil {
		return nil, err
	}

	defer cursor.Close(ctx)

	var users []*model.User

	for cursor.Next(ctx) {
		var user model.User
		if err := cursor.Decode(&user); err != nil {
			return nil, err
		}
		users = append(users, &user)
	}

	if err := cursor.Err(); err != nil {
		return nil, err
	}

	return users, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
